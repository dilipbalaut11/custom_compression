-- test creating table with compression method
CREATE TABLE cmdata(f1 text COMPRESSION pglz);
CREATE INDEX idx ON cmdata(f1);
INSERT INTO cmdata VALUES(repeat('1234567890',1000));
\d+ cmdata
                                        Table "public.cmdata"
 Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description 
--------+------+-----------+----------+---------+----------+-------------+--------------+-------------
 f1     | text |           |          |         | extended | pglz        |              | 
Indexes:
    "idx" btree (f1)

CREATE TABLE cmdata1(f1 TEXT COMPRESSION lz4);
INSERT INTO cmdata1 VALUES(repeat('1234567890',1004));
\d+ cmdata1
                                        Table "public.cmdata1"
 Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description 
--------+------+-----------+----------+---------+----------+-------------+--------------+-------------
 f1     | text |           |          |         | extended | lz4         |              | 

-- verify stored compression method
SELECT pg_column_compression(f1) FROM cmdata;
 pg_column_compression 
-----------------------
 pglz
(1 row)

SELECT pg_column_compression(f1) FROM cmdata1;
 pg_column_compression 
-----------------------
 lz4
(1 row)

-- decompress data slice
SELECT SUBSTR(f1, 200, 5) FROM cmdata;
 substr 
--------
 01234
(1 row)

SELECT SUBSTR(f1, 2000, 50) FROM cmdata1;
                       substr                       
----------------------------------------------------
 01234567890123456789012345678901234567890123456789
(1 row)

-- copy with table creation
SELECT * INTO cmmove1 FROM cmdata;
SELECT pg_column_compression(f1) FROM cmmove1;
 pg_column_compression 
-----------------------
 pglz
(1 row)

-- update using datum from different table
CREATE TABLE cmmove2(f1 text COMPRESSION pglz);
INSERT INTO cmmove2 VALUES (repeat('1234567890',1004));
SELECT pg_column_compression(f1) FROM cmmove2;
 pg_column_compression 
-----------------------
 pglz
(1 row)

UPDATE cmmove2 SET f1 = cmdata.f1 FROM cmdata;
SELECT pg_column_compression(f1) FROM cmmove2;
 pg_column_compression 
-----------------------
 pglz
(1 row)

UPDATE cmmove2 SET f1 = cmdata1.f1 FROM cmdata1;
SELECT pg_column_compression(f1) FROM cmmove2;
 pg_column_compression 
-----------------------
 pglz
(1 row)

-- copy to existing table
CREATE TABLE cmmove3(f1 text COMPRESSION pglz);
INSERT INTO cmmove3 SELECT * FROM cmdata;
INSERT INTO cmmove3 SELECT * FROM cmdata1;
SELECT pg_column_compression(f1) FROM cmmove2;
 pg_column_compression 
-----------------------
 pglz
(1 row)

-- test LIKE INCLUDING COMPRESSION
CREATE TABLE cmdata2 (LIKE cmdata1 INCLUDING COMPRESSION);
\d+ cmdata2
                                        Table "public.cmdata2"
 Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description 
--------+------+-----------+----------+---------+----------+-------------+--------------+-------------
 f1     | text |           |          |         | extended | lz4         |              | 

-- drop original compression information
DROP TABLE cmdata;
DROP TABLE cmdata1;
-- check data is ok
SELECT length(f1) FROM cmmove1;
 length 
--------
  10000
(1 row)

SELECT length(f1) FROM cmmove2;
 length 
--------
  10040
(1 row)

SELECT length(f1) FROM cmmove3;
 length 
--------
  10000
  10040
(2 rows)

DROP TABLE cmmove1, cmmove2, cmmove3;
